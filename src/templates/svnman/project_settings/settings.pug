| {% extends 'svnman/project_settings/svnman_layout.html'  %}

| {% block svnman_container %}
#node-edit-form
	section
		h4 Checkout

		p Get a copy of this repository by using:
		p
			code svn checkout {{ svn_url }} my_repo

	hr

	section
		h4 Manage Access
		p.
			Users in this list have read/write access to the Subversion repository. It is not
			possible to allow read-only access. Their password is <em><strong>not</strong></em> their Blender ID
			password, but has to be set separately.
		p.
			Your login for Subversion is <a href='{{ url_for('settings.profile') }}'>your username</a>
			as it was at the moment you were granted access to the repository.

		.access-users-search
			.form-group
				input#user-search.form-control(
					name='contacts',
					type='text',
					placeholder='Grant user access by name')

		table.w-100(class="access-users-list")
			thead
				tr
					th
					th Subversion Login
					th Password Set
					th
			tbody
				| {% for userinfo in svn_users %}
				| {% set user=userinfo['db'] %}
				| {% set is_self=current_user.user_id == user['_id'] %}
				tr.border-bottom(data-user-id="{{ user['_id'] }}",
					class="{% if is_self %}self{% endif %}")
					td.py-3
						img.rounded-circle.mx-2(
							src="{{ user['email'] | gravatar(24) }}")
						span.access-users-name
							| {{ user['full_name'] }}
							| {% if current_user.objectid == user['_id'] %}
							small (You)
							| {% endif %}
					td.js-copy-to-clipboard.cursor-pointer(
						data-clipboard-text="{{ userinfo['username'] }}",
						title="Click to copy username to clipboard") {{ userinfo['username'] }}
					td.pr-3(class="col-password")
						| {% if userinfo['pw_set'] %}
						button.btn.btn-sm.btn-outline-secondary.btn-block(title="{% if is_self %}You have{% else %}The user has{% endif %} set a password; click to change it.")
							| Change Password
						| {% else %}
						i.pi-cancel
						button.btn.btn-sm.btn-outline-primary.btn-block(title="{% if is_self %}You have{% else %}The user has{% endif %} no password; click to set it.")
							| Set Password
						| {% endif %}
					td(class="col-revoke")
						| {%     if is_self %}
						button.btn.btn-sm.btn-outline-danger(title="Revoke your own access")
							i.pi-trash
						| {%     else %}
						button.btn.btn-sm.btn-outline-danger(title="Revoke access of this user")
							i.pi-trash
						| {%     endif %}

			| {% endfor %}

	hr

	section
		h4 Dangerous Operations
		p
			button.btn.btn-danger.px-3(onclick='deleteRepo()')
				i.pi-trash.pr-2
				| Delete Subversion repository
		p.text-danger Note that deleting an operation is permanent and <em><strong>cannot be undone</strong></em>. Use with caution.

| {% endblock svnman_container %}

| {% block footer_scripts %}
script.
	var grant_access_url = '{{ url_for( "svnman.grant_access", project_url=project.url, repo_id=repo_id) }}';
	var revoke_access_url = '{{ url_for( "svnman.revoke_access", project_url=project.url, repo_id=repo_id) }}';
	var delete_repo_url = '{{ url_for( "svnman.delete_repo", project_url=project.url, repo_id=repo_id) }}';

	$('#user-search').userSearch(function(event, hit, dataset) {
			var $existing = $('li.access-users-item[data-user-id="' + hit.objectID + '"]');
			if ($existing.length) {
				$existing
					.addClass('active')
					.delay(1000)
					.queue(function() {
						console.log('no');
						$existing.removeClass('active');
						$existing.dequeue();
					});
				toastr.info('User already has access');
			}
			else {
				grantUser(hit.objectID);
			}
		}
	);

	$('.access-users-list .col-password button').click(function() {
		var user_id = $(this).closest('*[data-user-id]').data('user-id');
		setPassword(user_id);
	})

	$('.access-users-list .col-revoke button').click(function() {
		var user_id = $(this).closest('*[data-user-id]').data('user-id');
		revokeUser(user_id);
	})

	function setPassword(user_id) {
		var randomstring = Password.generate(16);

		password = prompt("Provide a new password. We have generated a random one for you. " +
			"It's up to you to send this password to the user in a secure way.", randomstring);
		if (!password) return;

		ajax(grant_access_url, {user_id: user_id, password: password});
	}

	function grantUser(user_id) {
		toastr.info('Granting access to user')
		ajax(grant_access_url, {user_id: user_id}, 'Error granting access: ');
	}

	function revokeUser(user_id) {
		toastr.info('Revoking access from user')
		ajax(revoke_access_url, {user_id: user_id}, 'Error revoking access: ');
	}

	function deleteRepo() {
		if (!confirm('Are you sure you want to delete this repository? This CANNOT be undone! You WILL loose this data.'))
			return;
		toastr.info('Deleting repository')
		ajax(delete_repo_url, null, 'Error deleting repository: ');
	}

	function ajax(url, payload, error_msg) {
		$.ajax({
			url: url,
			data: payload,
			method: 'POST',
		})
		.done(function() {
			window.location.reload();
		})
		.fail(function(err) {
			var err_elt = xhrErrorResponseElement(err, error_msg);
			toastr.error(err_elt);
		});
	}

	var clipboard = null;
	function createClipboard() {
		if (clipboard != null) {
			clipboard.destroy();
		}

		clipboard = new Clipboard('.js-copy-to-clipboard');

		clipboard.on('success', function(e) {
			$(e.trigger).flashOnce();
			toastr.success('Copied to clipboard');
		});
	}
	createClipboard();

| {% endblock %}
